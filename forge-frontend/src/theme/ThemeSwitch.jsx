import {
  useState,
  useMemo,
  useEffect,
  useCallback,
} from 'react';
import { ThemeProvider, CssBaseline, rgbToHex } from '@mui/material';
import { view } from '@forge/bridge';

import { makeDefaultTheme } from './themes/Default';
import { makeSeaTheme } from './themes/Sea';
import { makeCloudTheme } from './themes/Cloud';
import { makeColorblindTheme } from './themes/RedGreenColorblind';
import { ThemeContext } from './ThemeContext';

function ensureFactory(fn, name) {
  if (typeof fn !== 'function') {
    throw new Error(`[ThemeSwitch] ${name} is not a function. Check its export/import.`);
  }
  return fn;
}

const factoryMap = {
  default: ensureFactory(makeDefaultTheme, 'makeDefaultTheme'),
  sea: ensureFactory(makeSeaTheme, 'makeSeaTheme'),
  cloud: ensureFactory(makeCloudTheme, 'makeCloudTheme'),
  rgblind: ensureFactory(makeColorblindTheme, 'makeColorblindTheme'),
};

export const MyTheme = ({ children }) => {
  const [themeName, _setThemeName] = useState('default');
  const [mode, setMode] = useState('light');

  const setThemeName = useCallback((name) => {
    if (!factoryMap[name]) {
      console.warn(`[ThemeSwitch] unknown themeName "${name}", fallback to "default"`);
    }
    _setThemeName(name);
  }, []);


  useEffect(() => {
    view.theme.enable();
  }, []);

  // Automatically follow Atlassian's light/dark
  useEffect(() => {
    const htmlEl = document.documentElement;
    const apply = () => {
      const m = htmlEl.getAttribute('data-color-mode') === 'dark' ? 'dark' : 'light';
      setMode((prev) => (prev === m ? prev : m));
    };
    apply();
    const obs = new MutationObserver(apply);
    obs.observe(htmlEl, { attributes: true, attributeFilter: ['data-color-mode'] });
    return () => obs.disconnect();
  }, []);

  // Internal theme factory
  const theme = useMemo(() => {
    const factory = factoryMap[themeName] ?? factoryMap.default;
    const t = factory(mode);
    if (!t || !t.palette) {
      throw new Error('[ThemeSwitch] invalid theme object generated by factory');
    }
    return t;
  }, [themeName, mode]);

  return (
    <ThemeContext.Provider value={{ themeName, setThemeName, mode }}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};


